version: "3"

services:
  adguard:
    container_name: adguard
    image: adguard/adguardhome
    # user: ${PUID}:${PGID}
    restart: unless-stopped
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - 3001:3000
    volumes:
      - ${DATADIR}/adguard/config:/opt/adguardhome/conf/
      - ${DATADIR}/adguard/data:/opt/adguardhome/work/data/
    networks:
      - default
      - traefik-network
    labels:
      - traefik.enable=true
      # TODO: try replacing with env variables
      - traefik.http.routers.adguard.rule=Host(`adguard.jkomskis.com`)
      - traefik.http.services.adguard.loadbalancer.server.port=3000
      - traefik.http.routers.adguard.tls.certresolver=le
      - traefik.http.routers.adguard.entrypoints=websecure

  traefik:
    container_name: traefik
    image: traefik:2.8
    # user: ${PUID}:${PGID}
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATADIR}/traefik/data/acme.json:/acme.json
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik-network
      - --certificatesresolvers.le.acme.email=${MY_EMAIL}
      - --certificatesresolvers.le.acme.storage=/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --api.insecure
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirs.entrypoints=web"
      - "traefik.http.routers.redirs.middlewares=redirect-to-https"
    networks:
      - traefik-network
    extra_hosts:
      - host.docker.internal:172.19.0.1

  duckdns:
    container_name: duckdns
    image: lscr.io/linuxserver/duckdns
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SUBDOMAINS=${DUCKDNS_SUBDOMAINS}
      - TOKEN=${DUCKDNS_TOKEN}
      - LOG_FILE=false #optional

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true # deleting old unused images automatically
      # optional for notifications
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${EMAIL_FROM}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_EMAIL_TO}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${SMTP_PORT}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD}

  influxdb:
    container_name: influxdb
    image: influxdb:2.3
    user: ${PUID}:${PGID}
    restart: unless-stopped
    ports:
      - 8086:8086
    volumes:
      - "${DATADIR}/influxdb/config:/etc/influxdb2"
      - "${DATADIR}/influxdb/data:/var/lib/influxdb2"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=smarthome
      - DOCKER_INFLUXDB_INIT_BUCKET=homeassistant
    healthcheck:
      test: [ "CMD", "curl", "-sI", "http://127.0.0.1:8086/ping" ]
      interval: 5s
      timeout: 1s
      retries: 48

  grafana:
    container_name: grafana
    image: grafana/grafana:9.0.2 # See https://grafana.com/docs/grafana/next/setup-grafana/installation/docker/#migrate-from-previous-docker-containers-versions before upgrading
    user: ${PUID}:${PGID}
    restart: unless-stopped
    depends_on:
      influxdb:
        condition: service_healthy
    volumes:
      - "${DATADIR}/grafana/data:/var/lib/grafana"
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ALLOW_EMBEDDING=true
    labels:
      - traefik.enable=true
      # TODO: try replacing with env variables
      - traefik.http.routers.grafana.rule=Host(`grafana.jkomskis.com`)
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana.tls.certresolver=le
      - traefik.http.routers.grafana.entrypoints=websecure
    networks:
      - default
      - traefik-network

  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:2
    user: ${PUID}:${PGID}
    restart: unless-stopped
    volumes:
      - "${DATADIR}/mosquitto/config:/mosquitto/config"
      - "${DATADIR}/mosquitto/data:/mosquitto/data"
      - "${DATADIR}/mosquitto/log:/mosquitto/log"
    ports:
      - 1883:1883

  homeassistant:
    container_name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:2022.7
    # user: ${PUID}:${PGID}
    restart: unless-stopped
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
    volumes:
      - ${DATADIR}/homeassistant/config:/config
      - ${DATADIR}/homeassistant/docker/run:/etc/services.d/home-assistant/run
      - /etc/localtime:/etc/localtime:ro
      - /dev/serial/by-id/:/dev/serial/by-id/
    depends_on:
      influxdb:
        condition: service_healthy
      mosquitto:
        condition: service_started
    ports:
      - 8123:8123
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      # don't automatically update this container in case of breaking changes
      - com.centurylinklabs.watchtower.enable=false
      - traefik.enable=true
      # TODO: try replacing with env variables
      - traefik.http.routers.ha.rule=Host(`ha.jkomskis.com`)
      - traefik.http.services.ha.loadbalancer.server.port=8123
      - traefik.http.routers.ha.tls.certresolver=le
      - traefik.http.routers.ha.entrypoints=websecure
    network_mode: host

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:1.26.0
    user: ${PUID}:${PGID}
    group_add:
      - dialout
    depends_on:
      mosquitto:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ${DATADIR}/zigbee2mqtt/data:/app/data/
      - /run/udev:/run/udev:ro
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
    environment:
      - TZ=${TZ}
    ports:
      - 8081:8080

networks:
  traefik-network:
    external: true
